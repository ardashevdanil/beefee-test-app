{"version":3,"sources":["components/Select.js","constants/index.js","redux/modules/tasks.js","components/Tasks.js","redux/modules/auth.js","components/Login.js","components/EditTask.js","components/AddTask.js","redux/index.js","serviceWorker.js","index.js","App.js"],"names":["Select","onChange","name","data-type","DEVELOPER","fetchTasksRequest","createAction","fetchTasksSuccess","fetchTasksFailure","fetchTasks","payload","dispatch","a","axios","params","developer","res","data","status","response","addTaskRequest","addTaskSuccess","addTaskFailure","editTaskRequest","editTaskSuccess","editTaskFailure","tasks","handleActions","state","action","message","error","combineActions","total_task_count","Tasks","setSelectedTask","useSelector","auth","token","Math","ceil","pages","useState","sortOptions","setSortOptions","useDispatch","e","sort_field","target","dataset","type","sort_direction","value","useEffect","Object","keys","map","k","join","border","cellPadding","length","t","key","id","onClick","style","cursor","username","email","text","Array","slice","p","page","color","loginRequest","loginSuccess","loginFailure","logout","initialState","Login","values","onSubmit","formData","FormData","forEach","item","append","post","render","handleSubmit","placeholder","component","required","EditTask","selectedTask","find","task","getState","editTask","initialValues","parse","v","input","checked","AddTask","rootReducer","combineReducers","Boolean","window","location","hostname","match","defaults","baseURL","store","enhancers","composeEnhancers","compose","applyMiddleware","thunk","createStore","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd783845.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const Select = ({ onChange, name }) => (\n  <select\n    onChange={onChange}\n    data-type={name}\n  >\n    <option>asc</option>\n    <option>desc</option>\n  </select>\n)\n\nSelect.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n}\n","export const DEVELOPER = 'Danil_Ardashev'\n","import { createAction, handleActions, combineActions } from 'redux-actions'\nimport axios from 'axios'\n\nimport { DEVELOPER } from '../../constants'\n\nconst fetchTasksRequest = createAction('FETCH_TASKS_REQUEST')\nconst fetchTasksSuccess = createAction('FETCH_TASKS_SUCCESS')\nconst fetchTasksFailure = createAction('FETCH_TASKS_FAILURE')\n\nexport const fetchTasks = (payload = {}) => async (dispatch) => {\n  dispatch(fetchTasksRequest())\n\n  try {\n    const res = await axios('/', {\n      params: {\n        developer: DEVELOPER,\n        ...payload\n      }\n    })\n\n    if (res.data.status === 'error') {\n      dispatch(fetchTasksFailure(res.data))\n    } else {\n      dispatch(fetchTasksSuccess(res.data))\n    }\n\n  } catch (e) {\n    dispatch(fetchTasksFailure(e.response))\n  }\n}\n\nconst addTaskRequest = createAction('ADD_TASK_REQUEST')\nconst addTaskSuccess = createAction('ADD_TASK_SUCCESS')\nconst addTaskFailure = createAction('ADD_TASK_FAILURE')\n\nexport const addTask = payload => async (dispatch) => {\n  dispatch(addTaskRequest())\n\n  const formData = new FormData()\n\n  Object.keys(payload).forEach((item) => {\n    formData.append(item, payload[item])\n  })\n\n  try {\n    const res = await axios.post(`/create?developer=${DEVELOPER}`, formData)\n\n    if (res.data.status === 'error') {\n      dispatch(addTaskFailure(res.data))\n    } else {\n      dispatch(addTaskSuccess(res.data))\n      dispatch(fetchTasks())\n    }\n\n  } catch (e) {\n    dispatch(addTaskFailure(e.response))\n  }\n}\n\nconst editTaskRequest = createAction('EDIT_TASK_REQUEST')\nconst editTaskSuccess = createAction('EDIT_TASK_SUCCESS')\nconst editTaskFailure = createAction('EDIT_TASK_FAILURE')\n\nexport const editTask = ({ values, id }) => async (dispatch, getState) => {\n  dispatch(editTaskRequest())\n\n  const { token } = getState().auth\n  const formData = new FormData()\n\n  formData.append('token', token)\n\n  Object.keys(values).forEach((item) => {\n    formData.append(item, values[item])\n  })\n\n  try {\n    const res = await axios.post(`/edit/${id}?developer=${DEVELOPER}`, formData)\n\n    if (res.data.status === 'error') {\n      dispatch(editTaskFailure(res.data))\n    } else {\n      dispatch(editTaskSuccess(res.data))\n      dispatch(fetchTasks())\n    }\n\n  } catch (e) {\n    dispatch(editTaskFailure(e.response))\n  }\n}\n\nconst initialState = {\n  data: { tasks: [], total_task_count: 0 },\n  error: null,\n}\n\nexport const tasks = handleActions({\n  [fetchTasksSuccess]: (state, action) => ({ data: action.payload.message, error: null }),\n  [combineActions(\n    fetchTasksFailure,\n    addTaskFailure,\n    editTaskFailure,\n  )]: (state, action) => ({ ...state, error: action.payload.message }),\n}, initialState)\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Select } from '../components/Select'\nimport { fetchTasks } from '../redux/modules/tasks'\n\nexport const Tasks = ({ setSelectedTask }) => {\n  const [\n    token,\n    tasks,\n    pages,\n    error,\n  ] = useSelector(state => [\n    state.auth.token,\n    state.tasks.data.tasks,\n    Math.ceil(state.tasks.data.total_task_count / 3) + 1,\n    state.tasks.error,\n  ])\n\n  const [sortOptions, setSortOptions] = useState({})\n\n  const dispatch = useDispatch()\n\n  const onButtonClick = (page) => {\n    setSortOptions({\n      ...sortOptions,\n      page,\n    })\n  }\n\n  const onChange = (e) => {\n    setSortOptions({\n      ...sortOptions,\n      sort_field: e.target.dataset.type,\n      sort_direction: e.target.value,\n    })\n  }\n\n  useEffect(() => {\n    dispatch(fetchTasks(sortOptions))\n  }, [dispatch, sortOptions])\n\n  if (error) return <div>Error: {Object.keys(error).map(k => error[k]).join(', ')}</div>\n\n  return (\n    <div>\n      <h3>Tasks:</h3>\n      <table border='1' cellPadding='10'>\n        <tbody>\n          <tr>\n            <th>\n              User name&nbsp;\n              <Select name='username' onChange={onChange}/>\n            </th>\n            <th>\n              Email\n              <Select name='email' onChange={onChange}/>\n            </th>\n            <th>\n              Text\n            </th>\n            <th>\n              Status\n              <Select name='status' onChange={onChange}/>\n            </th>\n          </tr>\n          {\n            tasks.length\n              ? tasks.map(t => (\n                <tr\n                  key={t.id}\n                  onClick={() => token ? setSelectedTask(t.id) : null}\n                  style={{ cursor: token ? 'pointer' : 'initial' }}\n                >\n                  <td>{t.username}</td>\n                  <td>{t.email}</td>\n                  <td>{t.text}</td>\n                  <td>{t.status === 10 ? 'Done' : 'Todo'}</td>\n                </tr>\n              ))\n              : null\n          }\n        </tbody>\n      </table>\n      <div>\n        Pages:&nbsp;\n        {\n          pages\n            ? [...Array(pages).keys()].slice(1).map(p => (\n              <button\n                key={p}\n                onClick={() => onButtonClick(p)}\n                type='button'\n                style={{\n                  color: p === sortOptions.page && 'red',\n                }}\n              >\n                {p}\n              </button>\n            ))\n            : null\n        }\n      </div>\n    </div>\n  )\n}\n\nTasks.propTypes = {\n  setSelectedTask: PropTypes.func.isRequired,\n}\n","import { createAction, handleActions } from 'redux-actions'\nimport axios from 'axios'\n\nimport { DEVELOPER } from '../../constants'\n\nconst loginRequest = createAction('LOGIN_REQUEST')\nconst loginSuccess = createAction('LOGIN_SUCCESS')\nconst loginFailure = createAction('LOGIN_FAILURE')\n\nexport const logout = createAction('LOGOUT')\n\nexport const login = payload => async (dispatch) => {\n  dispatch(loginRequest(payload))\n\n  const formData = new FormData()\n\n  Object.keys(payload).forEach((item) => {\n    formData.append(item, payload[item])\n  })\n\n  try {\n    const res = await axios.post(`/login?developer=${DEVELOPER}`, formData) \n\n    if (res.data.status === 'error') {\n      dispatch(loginFailure(res.data))\n    } else {\n      dispatch(loginSuccess(res.data))\n    }\n    \n  } catch(e) {\n    dispatch(loginFailure(e.response))\n  }\n}\n\nconst initialState = {\n  token: null,\n  error: null,\n}\n\nexport const auth = handleActions({\n  [loginSuccess]: (state, action) => ({ token: action.payload.message.token, error: null }),\n  [loginFailure]: (state, action) => ({ ...state, error: action.payload.message }),\n  [logout]: () => initialState,\n}, initialState)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Form, Field } from 'react-final-form'\n\nimport { login, logout } from '../redux/modules/auth'\n\nexport const Login = () => {\n  const dispatch = useDispatch()\n  const [error, token] = useSelector(state => [state.auth.error, state.auth.token])\n\n  const onSubmit = values => dispatch(login(values))\n  const onLogout = values => dispatch(logout(values))\n\n  if (token) return <button type='button' onClick={onLogout}>Logout</button>\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      render={({ handleSubmit }) => (\n        <form onSubmit={handleSubmit}>\n          <h3>Login</h3>\n          <Field\n            name='username'\n            placeholder='User name'\n            component='input'\n            type='text'\n            required\n          />\n          <Field\n            name='password'\n            placeholder='Password'\n            component='input'\n            type='password'\n            required\n          />\n          <button type='submit'>Login</button>\n          {error && <div>Error: {Object.keys(error).map(k => error[k]).join(', ')}</div>}\n        </form>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Form, Field } from 'react-final-form'\n\nimport { editTask } from '../redux/modules/tasks'\n\nexport const EditTask = ({ selectedTask }) => {\n  const dispatch = useDispatch()\n\n  const [task] = useSelector(state => ([\n    state.tasks.data.tasks.find(t => selectedTask === t.id),\n  ]))\n\n  const onSubmit = values => dispatch(editTask({ values, id: selectedTask }))\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      initialValues={task}\n      render={({ handleSubmit }) => (\n        <form onSubmit={handleSubmit}>\n          <h3>Edit task</h3>\n          <label>\n            <Field\n              name='text'\n              placeholder='Text'\n              component='textarea'\n              required\n            />\n            - Text\n          </label>\n          <br />\n          <br />\n          <label>\n            <Field\n              name='status'\n              type='checkbox'\n              parse={v => v ? 10 : 0}\n              render={({ input }) => (\n                <input\n                  type='checkbox'\n                  value={input.value}\n                  checked={input.value === 10 ? true : false}\n                  onChange={input.onChange}\n                />\n              )}\n            />\n            Status\n          </label>\n          <br />\n          <br />\n          <button type='submit'>Edit</button>\n        </form>\n      )}\n    />\n  )\n}\n\nEditTask.propTypes = {\n  selectedTask: PropTypes.number.isRequired,\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Form, Field } from 'react-final-form'\n\nimport { addTask } from '../redux/modules/tasks'\n\nexport const AddTask = () => {\n  const dispatch = useDispatch()\n\n  const onSubmit = values => dispatch(addTask(values))\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      render={({ handleSubmit }) => (\n        <form onSubmit={handleSubmit}>\n          <h3>Add task</h3>\n          <label>\n            <Field\n              name='username'\n              placeholder='User name'\n              component='input'\n              type='text'\n              required\n            />\n            - User name\n          </label>\n          <br />\n          <label>\n            <Field\n              name='email'\n              placeholder='Email'\n              component='input'\n              type='email'\n              required\n            />\n            - Email\n          </label>\n          <br />\n          <label>\n            <Field\n              name='text'\n              placeholder='Text'\n              component='textarea'\n              required\n            />\n            - Text\n          </label>\n          <br />\n          <br />\n          <button type='submit'>Add</button>\n        </form>\n      )}\n    />\n  )\n}\n","import {\n  combineReducers,\n  createStore,\n  applyMiddleware,\n  compose,\n} from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { tasks } from './modules/tasks'\nimport { auth } from './modules/auth'\n\nconst rootReducer = combineReducers({\n  tasks,\n  auth,\n})\n\nexport const configureStore = () => {\n  const composeEnhancers = (process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose\n\n  const enhancers = composeEnhancers(applyMiddleware(thunk))\n\n  const store = createStore(\n    rootReducer,\n    enhancers,\n  )\n\n  return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport { configureStore } from './redux'\nimport * as serviceWorker from './serviceWorker'\n\naxios.defaults.baseURL = 'https://uxcandy.com/~shapoval/test-task-backend/v2'\n\nconst store = configureStore()\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n), document.getElementById('root'))\n\nserviceWorker.unregister()\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Tasks } from './components/Tasks'\nimport { Login } from './components/Login'\nimport { EditTask } from './components/EditTask'\nimport { AddTask } from './components/AddTask'\n\nexport const App = () => {\n  const [selectedTask, setSelectedTask] = useState(0);\n  const token = useSelector(state => state.auth.token)\n\n  return (\n    <div>\n      <Login />\n      <Tasks setSelectedTask={setSelectedTask} />\n      {token && selectedTask ? <EditTask selectedTask={selectedTask} /> : null}\n      <AddTask />\n    </div>\n  )\n}\n"],"sourceRoot":""}